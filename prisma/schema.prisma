// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  apartments   Apartment[]   // Relation avec les appartements possédés
  bookings     Booking[]     // Réservations effectuées par l'utilisateur
  reviews      Review[]      // Avis laissés par l'utilisateur
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Apartment {
  id           String        @id @default(uuid())
  name         String
  address      String
  city         City          @relation(fields: [cityId], references: [id])
  cityId       String
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String
  bookings     Booking[]     // Réservations pour cet appartement
  reviews      Review[]      // Avis pour cet appartement
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model City {
  id           String        @id @default(uuid())
  name         String        @unique // Nom de la ville, unique pour éviter les doublons
  apartments   Apartment[]   // Liste des appartements dans cette ville
}

model Booking {
  id           String        @id @default(uuid())
  startDate    DateTime      // Date de début de la réservation
  endDate      DateTime      // Date de fin de la réservation
  apartment    Apartment     @relation(fields: [apartmentId], references: [id])
  apartmentId  String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Review {
  id           String        @id @default(uuid())
  rating       Int           // Note de l'utilisateur (exemple : 1 à 5)
  comment      String?       // Commentaire facultatif
  apartment    Apartment     @relation(fields: [apartmentId], references: [id])
  apartmentId  String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime      @default(now())
}
